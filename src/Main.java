/*Exercice : SystÃ¨me de gestion des requÃªtes utilisateur
Vous devez implÃ©menter un systÃ¨me qui gÃ¨re les requÃªtes des utilisateurs via une chaÃ®ne de responsabilitÃ©. Le systÃ¨me repose sur une Factory pour crÃ©er les requÃªtes, un Builder pour les construire, et un Singleton pour gÃ©rer un journal des requÃªtes traitÃ©es.
Les requÃªtes concernent la gestion dâ€™une BDD de film Ã  la Netflix.

ğŸ”¹ Contraintes
Builder Pattern : Construire un objet Request avec divers paramÃ¨tres (id, type, contenu).
Factory Pattern : Une RequestFactory pour crÃ©er des requÃªtes en fonction du type demandÃ©.
Singleton Pattern : Un RequestLogger qui stocke les requÃªtes traitÃ©es.
Chain of Responsibility : Une chaÃ®ne de gestionnaires (Handler) qui traitent la requÃªte si possible, ou la passent au suivant.
GÃ©rer lâ€™auth
Ne pas dÃ©passer 10 films*/

public class Main {
    public static void main(String[] args) {
        Film film1 = new Film(1, "Les bronzÃ© font du ski", "Humour", 120);
        Film film2 = new Film(2, "Greys anatomie", "Drame", 120);
        Film film3 = new Film(3, "Les simpson", "Humour", 120);
        Film film4 = new Film(4, "Ariety", "AnimÃ©", 120);
    }
}